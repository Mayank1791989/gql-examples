# A list of options for the sort order of the feed
enum FeedType {
  # Sort by a combination of freshness and score, using Reddit's algorithm
  HOT
  # Newest entries first
  NEW
  # Highest score entries first
  TOP
}
type Query {
  # A feed of repository submissions
  feed(
    # The sort order for the feed
    type: FeedType!,
    # The number of items to skip, for pagination
    offset: Int,
    # The number of items to fetch starting from the offset, for pagination
    limit: Int
  ): [Entry]
  # A single entry
  entry(
    # The full repository name from GitHub, e.g. "apollostack/GitHunt-API"
    repoFullName: String!
  ): Entry
  # Return the currently logged in user, or null if nobody is logged in
  currentUser: User @cacheControl(scope: PRIVATE)
}
# The type of vote to record, when submitting a vote
enum VoteType {
  UP
  DOWN
  CANCEL
}
type Mutation {
  # Submit a new repository, returns the new submission
  submitRepository(
    # The full repository name from GitHub, e.g. "apollostack/GitHunt-API"
    repoFullName: String!
  ): Entry
  # Vote on a repository submission, returns the submission that was voted on
  vote(
    # The full repository name from GitHub, e.g. "apollostack/GitHunt-API"
    repoFullName: String!,
    # The type of vote - UP, DOWN, or CANCEL
    type: VoteType!
  ): Entry
  # Comment on a repository, returns the new comment
  submitComment(
    # The full repository name from GitHub, e.g. "apollostack/GitHunt-API"
    repoFullName: String!,
    # The text content for the new comment
    commentContent: String!
  ): Comment
}

type Subscription {
  # Subscription fires on every comment added
  commentAdded(repoFullName: String!): Comment
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
